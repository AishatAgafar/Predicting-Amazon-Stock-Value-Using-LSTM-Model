#Importing the Libraries
#!pip install keras
#!pip install tensorflow
#import tensorflow as tf
#!pip install yahoo-finance
!pip install yfinance
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#import matplotlib
!pip install pydot
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.dates as mandates
from sklearn import linear_model
import keras.backend as k
from keras.callbacks import EarlyStopping
#from keras.optimizers import adam
from keras.models import load_model
from keras.utils.vis_utils import plot_model


import yfinance as yf



df = yf.download('AMZN', start='2010-01-01', end='2022-01-31')
df

# #Get the Dataset
# df=pd.read_csv("MicrosoftStockData.csv",na_values=['null'],index_col='Date',parse_dates=True,infer_datetime_format=True)
# temp  = [ var.split(',') for var in df['Volume']]
# df['Volume'] = [ float(var[0] + var[1] + var[2]) for var in temp]
# df

#Set Target Variable
output_var = pd.DataFrame(df['Close'])

#Selecting the Features
features = df[['Open','High','Low','Volume']]

#Splitting to Training set and Test set
timesplit= TimeSeriesSplit(n_splits=10)
for train_index, test_index in timesplit.split(features):
        X_train, X_test = features[:len(train_index)], features[len(train_index): (len(train_index)+len(test_index))]
        y_train, y_test = output_var[:len(train_index)].values.ravel(), output_var[len(train_index): (len(train_index)+len(test_index))].values.ravel()

scaler = MinMaxScaler()
fitter  = scaler.fit(X_train)

X_train = fitter.transform(X_train)
X_test = fitter.transform(X_test)

#Scaling
scaler = MinMaxScaler()
feature_transform = scaler.fit_transform(features)
#feature_transform = pd.DataFrame(columns=features,data=feature_transform,index=df.index)
feature_transform

#Splitting to Training set and Test set
timesplit= TimeSeriesSplit(n_splits=10)
for train_index, test_index in timesplit.split(feature_transform):
        X_train, X_test = feature_transform[:len(train_index)], feature_transform[len(train_index): (len(train_index)+len(test_index))]
        y_train, y_test = output_var[:len(train_index)].values.ravel(), output_var[len(train_index): (len(train_index)+len(test_index))].values.ravel()

#Process the data for LSTM
trainX = np.array(X_train)
testX = np.array(X_test)
X_train = trainX.reshape(X_train.shape[0], 1, X_train.shape[1])
X_test = testX.reshape(X_test.shape[0], 1, X_test.shape[1])

#Building the LSTM Model
lstm = Sequential()
lstm.add(LSTM(32, input_shape=(1, trainX.shape[1]), activation='relu', return_sequences=False))
lstm.add(Dense(1))
lstm.compile(loss='mean_squared_error', optimizer='adam')
plot_model(lstm, show_shapes=True, show_layer_names=True)

#Model Training
history=lstm.fit(X_train, y_train, epochs=100, batch_size=8, verbose=1, shuffle=False)

#LSTM Prediction
y_pred = lstm.predict(X_test)

#Predicted vs True Adj Close Value â€“ LSTM
plt.plot(y_test, label='True Value')
plt.plot(y_pred, label='LSTM Value')
plt.title("Prediction by LSTM")
plt.xlabel('Time Scale')
plt.ylabel('Scaled USD')
plt.legend()
plt.show()
